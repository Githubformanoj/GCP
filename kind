create a user and authenticate it against the kubernetes api server to it can also logged in into the cluster and can do the task as per the access will be given to this user.

In this example we are using kind as a kubernetes cluster-------------

just logged in inside the control plane node and look for the path where certificate and keys are stored. - /etc/kubernetes/pki/ca.crt, ca.key

command for generating the key - openssl genrsa -out manoj.key 2048

command for create a csr -  openssl req -new -key manoj.key  -out manoj.csr -subj "/CN=manoj/O=developers"

command for generating a certificate by using the csr and kuberntes key&certificates. - openssl x509 -req -in manoj.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out manoj.crt -days 20

copy these three files to the host machine where are cluster is running. and create a user in the kubeconfig file using these key and crt.

Now create a user using these keys inside the kubeconfig file.---- k config set-credentials manoj --client-certificate manoj.crt --client-key manoj.key

Now the user has been added and we can set the context also for our user using the command -  k config set-context manoj-kindkind --user manoj --cluster kind-kind

command for changing the current contex - kubectx manoj-kindkind. but sill we won't be able to see the resources .

Now we have to create a role and rolebinding for giving permission to this user for creating deleting and watching the resources in kubernetes cluser 

Now will change the contex to manoj then we will be able to see the resources.
-------------

There is a another way by creating a certificate signing request resource and approve that using kubectl command.
--------------------------------------------------------------------

Kubectl create command -----------------------------

kubectl create secret generic testsecret --from-literal password==12345 --dry-run -oyaml-------- which means simply output the command in yaml format. ---The --from-literal parameter that we provided is meant to be used to directly specify the Secret data in the command in the plain text

kubectl create secret --help or kubectl create --help-------------------for other options.

command for checking on which perticular node the pod has scheduled. -  k get pods --all-namespaces -ojsonpath='{.items[?(@.spec.nodeName=="kind-control-plane")].metadata.name}'



Command for forwading the request from the vm interface to the docker containers ip where kind is running------------------------------------

 sudo iptables -A PREROUTING -t nat -i enp0s3 -p tcp --dport 30007 -j DNAT --to-destination 172.18.0.2:30007
 sudo iptables -A FORWARD -p tcp -d 172.18.0.2 --dport 30007 -j ACCEPT
 sudo apt-get install iptables-persistent
 sudo netfilter-persistent save

--------------------------------------------------------------

node selector, affinity, traints---------------------------apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  nodeSelector:
    disktype: ssd
  containers:
    - name: nginx
      image: nginx
      ports:
        - containerPort: 80
above is the example for scheduling a pod in a perticular node-------for this first we have to labeled our node using the command -  kubectl label node kind-worker disktype=ssd


node affinity ------ it can be used for which are all the pods where these pods can be scheduled on.
node selector--------it can be used for in which perticular node you want to schedule the pod.

Node Selector
Definition: Simple mechanism to control pod placement.
Key-Value Pair: Specifies nodes based on labels.

nodeSelector:
  disktype: ssd
-----------------

Node Affinity
Definition: Advanced way to control pod placement.
Types:
RequiredDuringSchedulingIgnoredDuringExecution: Mandatory criteria for pod placement.
PreferredDuringSchedulingIgnoredDuringExecution: Preferred but not mandatory criteria.
Expressions: Uses complex rules for node selection.

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: disktype
          operator: In
          values:
          - ssd

---------------------

Taints and Tolerations
Taints:

Definition: Applied to nodes to repel certain pods.
Effects: NoSchedule, PreferNoSchedule, NoExecute.

kubectl taint nodes node1 key=value:NoSchedule

-----------------------
Tolerations:

Definition: Applied to pods to allow them to run on tainted nodes.

tolerations:
- key: "key"
  operator: "Equal"
  value: "value"
  effect: "NoSchedule"
-----------------------


Kubernetes Init Containers
Definition:

Special containers that run and complete before the main application containers start.
Purpose:

Set Up Environment: Prepare the environment for the main containers.
Dependencies: Handle initialization that main containers depend on.
Sequential Tasks: Perform tasks that must complete before other tasks.
Differences from Regular Containers:

Lifecycle: Init containers must complete before application containers start.
Multiple Init Containers: If multiple init containers are specified, they run sequentially.
Common Uses:

Configuration Setup: Download configuration files.
Data Preparation: Set up databases or services.
Dependency Check: Ensure dependencies are met before main application starts.
Example:

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
spec:
  initContainers:
  - name: init-myservice
    image: busybox
    command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
  containers:
  - name: myapp-container
    image: myapp:latest
    ports:
    - containerPort: 80

In this example, the init-myservice container waits until the myservice is available before starting the myapp-container

-------------------------------

Kubernetes secrets -------------
using docker-registry secret for storing the credentials and pulling the image from private repo-------

command for creating secret----- kubectl create secret docker-registry pullsecret --docker-username manojtiwari000 --docker-password 'Arahan#@!1307' --docker-email bholebaba9456@gmail.com --dry-run -oyaml > secret.yaml
-----------------
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJtYW5vanRpd2FyaTAwMCIsInBhc3N3b3JkIjoiQXJhaGFuI0AhMTMwNyIsImVtYWlsIjoiYmhvbGViYWJhOTQ1NkBnbWFpbC5jb20iLCJhdXRoIjoiYldGdWIycDBhWGRoY21rd01EQTZRWEpoYUdGdUkwQWhNVE13Tnc9PSJ9fX0=
kind: Secret
metadata:
  creationTimestamp: null
  name: pullsecret
type: kubernetes.io/dockerconfigjson
--------------

When we create this secret then a config.json file will be generated which containes docker authentication details. a token can be also find inside secret.yaml. by decoding that in base64 you will fins the details.

below is the pod----
apiVersion: v1
kind: Pod
metadata:
  name: reactapp
spec:
  imagePullSecrets:
    - name: pullsecret
  containers:
    - name: reactapp
      image: manojtiwari000/reactapp-private:v1
      ports:
        - containerPort: 3000

-----------------------------------


We can also use the config.json file in case we dont have the username and password below i am using it -------below is the command for the same.

command for create secret ----- kubectl create secret generic pullsecret1 --from-file=.dockerconfigjson=/home/tom/.docker/config.json/ -type kubernetes.io/dockerconfigjson --dry-run -oyaml> secretone.yam -----
here the type is not opaque but the same which we have seen above using username and paasword.
------------------
Note ---
We can also specify imagepull secrets in service accounts also. when we create a pod then it uses a default service account inside where we can inject imagepull secret.
in this case first will create a secret then inject it inside the service account not in the pod thats the benifit.
Once we have used this secret inside the serviceaccount then this secret will applied for all the pods which are having that namespace where this service account is there. which means we dont have to provide
secret seperatly every pod in the same namespace will be using the secret.

--------------------------------------------------


























