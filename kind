create a user and authenticate it against the kubernetes api server to it can also logged in into the cluster and can do the task as per the access will be given to this user.

In this example we are using kind as a kubernetes cluster-------------

just logged in inside the control plane node and look for the path where certificate and keys are stored. - /etc/kubernetes/pki/ca.crt, ca.key

command for generating the key - openssl genrsa -out manoj.key 2048

command for create a csr -  openssl req -new -key manoj.key  -out manoj.csr -subj "/CN=manoj/O=developers"

command for generating a certificate by using the csr and kuberntes key&certificates. - openssl x509 -req -in manoj.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out manoj.crt -days 20

copy these three files to the host machine where are cluster is running. and create a user in the kubeconfig file using these key and crt.

Now create a user using these keys inside the kubeconfig file.---- k config set-credentials manoj --client-certificate manoj.crt --client-key manoj.key

Now the user has been added and we can set the context also for our user using the command -  k config set-context manoj-kindkind --user manoj --cluster kind-kind

command for changing the current contex - kubectx manoj-kindkind. but sill we won't be able to see the resources .

Now we have to create a role and rolebinding for giving permission to this user for creating deleting and watching the resources in kubernetes cluser 

Now will change the contex to manoj then we will be able to see the resources.
-------------

There is a another way by creating a certificate signing request resource and approve that using kubectl command.
--------------------------------------------------------------------

Kubectl create command -----------------------------

kubectl create secret generic testsecret --from-literal password==12345 --dry-run -oyaml-------- which means simply output the command in yaml format. ---The --from-literal parameter that we provided is meant to be used to directly specify the Secret data in the command in the plain text

kubectl create secret --help or kubectl create --help-------------------for other options.

command for checking on which perticular node the pod has scheduled. -  k get pods --all-namespaces -ojsonpath='{.items[?(@.spec.nodeName=="kind-control-plane")].metadata.name}'



Command for forwading the request from the vm interface to the docker containers ip where kind is running------------------------------------

 sudo iptables -A PREROUTING -t nat -i enp0s3 -p tcp --dport 30007 -j DNAT --to-destination 172.18.0.2:30007
 sudo iptables -A FORWARD -p tcp -d 172.18.0.2 --dport 30007 -j ACCEPT
 sudo apt-get install iptables-persistent
 sudo netfilter-persistent save

--------------------------------------------------------------

node selector, affinity, traints---------------------------apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  nodeSelector:
    disktype: ssd
  containers:
    - name: nginx
      image: nginx
      ports:
        - containerPort: 80
above is the example for scheduling a pod in a perticular node-------for this first we have to labeled our node using the command -  kubectl label node kind-worker disktype=ssd


node affinity ------ it can be used for which are all the pods where these pods can be scheduled on.
node selector--------it can be used for in which perticular node you want to schedule the pod.

Node Selector
Definition: Simple mechanism to control pod placement.
Key-Value Pair: Specifies nodes based on labels.

nodeSelector:
  disktype: ssd
-----------------

Node Affinity
Definition: Advanced way to control pod placement.
Types:
RequiredDuringSchedulingIgnoredDuringExecution: Mandatory criteria for pod placement.
PreferredDuringSchedulingIgnoredDuringExecution: Preferred but not mandatory criteria.
Expressions: Uses complex rules for node selection.

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: disktype
          operator: In
          values:
          - ssd

---------------------

Taints and Tolerations
Taints:

Definition: Applied to nodes to repel certain pods.
Effects: NoSchedule, PreferNoSchedule, NoExecute.

kubectl taint nodes node1 key=value:NoSchedule

-----------------------
Tolerations:

Definition: Applied to pods to allow them to run on tainted nodes.

tolerations:
- key: "key"
  operator: "Equal"
  value: "value"
  effect: "NoSchedule"
-----------------------












